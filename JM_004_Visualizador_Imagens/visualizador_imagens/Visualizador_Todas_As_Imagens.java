/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visualizador_imagens;

import br.com.jmary.home.Home;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.spi.FileSystemProvider;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author admin
 */
public class Visualizador_Todas_As_Imagens extends javax.swing.JPanel {
   
    int img_Atual = 0;
    
    Home Home;
    /**
     * Creates new form Visualizador_Interno2
     * @param Home2
     */
    public Visualizador_Todas_As_Imagens( Home Home2 ) {
        initComponents();
        
        Home = Home2;
        
        listar_Todas_imagens();
    }
    
    private void setarImagemExterna( int img_Atual2 ){ 
        img_Atual = img_Atual2;

        /*new Thread() {   @Override public void run() {*/ try { Thread.sleep( 1 );
            if( (img_Atual > 0) ){
                
                System.out.println( "if( (img_Atual > 0) ): " + img_Atual );
                setarImagemExterna2( img_Atual );
            }   
            else{
                
                img_Atual = lista_de_Imagens.size()-1;
                //System.out.println( "if( (img_Atual < 0) ): " + img_Atual );
                setarImagemExterna2( img_Atual );
            } 
        } catch( InterruptedException e ){ } //} }.start();
    }
    
    private void setarImagemExterna2( int img_Atual2 ){ 
        img_Atual = img_Atual2;
        File img_file = null;

        /*new Thread() {   @Override public void run() {*/
try { 
            img_file = new File( lista_de_Imagens.get( img_Atual ) );
                       
                    BufferedImage bufImg = null;
                    ImageIcon     icon   = null;
                    Image         image  = null;
                    try{
                        bufImg = ImageIO.read( img_file );
                        icon   = new ImageIcon(bufImg);
                        image  = icon.getImage();//ImageIO.read(f);  
                    } catch (IOException ex) {}  

                    try {  
                        image = icon.getImage();//ImageIO.read(f);  
                        int widith = image.getWidth(icon.getImageObserver() );
                        int height = image.getHeight(icon.getImageObserver() );
                                                                        
                        lbConteudo_Online.setIcon(new ImageIcon(image.getScaledInstance(
                            widith, height, Image.SCALE_DEFAULT)));
                       
                    }catch(Exception ex){}
                
                    String nome = img_file.getName();
                    String nomeList[] = nome.split(Pattern.quote("."));
                    //jTextArea5.setText(img_file.getPath());
        } catch( Exception e ){ 
            try{ System.out.println( "Ero: "+img_file.getPath() );  } catch( Exception e2 ){}
        } //} }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbConteudo_Online = new javax.swing.JLabel();

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador_imagens_imagens/laranja_home.png"))); // NOI18N
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel4MousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 7);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador_imagens_imagens/laranja_proximo.png"))); // NOI18N
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel5MousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador_imagens_imagens/laranja_anterior.png"))); // NOI18N
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel3MousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel3, gridBagConstraints);

        lbConteudo_Online.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lbConteudo_Online.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbConteudo_Online.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visualizador_imagens_imagens/anao.gif"))); // NOI18N
        lbConteudo_Online.setToolTipText("");
        lbConteudo_Online.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(lbConteudo_Online, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbConteudo_Online, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MousePressed
        img_Atual=0;
        setarImagemExterna2(0);
    }//GEN-LAST:event_jLabel4MousePressed

    private void jLabel5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MousePressed
        img_Atual++;
        setarImagemExterna(img_Atual);
    }//GEN-LAST:event_jLabel5MousePressed

    private void jLabel3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MousePressed
        img_Atual--;
        setarImagemExterna(img_Atual);
    }//GEN-LAST:event_jLabel3MousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbConteudo_Online;
    // End of variables declaration//GEN-END:variables
           
    private void listar_Todas_imagens(){
        
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
        
            listarDiretorios();
                        
        } catch( Exception e ){  } } }.start();                 
    }
    
    List<String> Sub_ZeroTxt = new ArrayList<>();
    private void listarDiretorios(){        
        try{              
            FileSystem fileSystem = FileSystems.getDefault();
            FileSystemProvider provider = fileSystem.provider();
            
            Iterable<Path> rootDirectories = fileSystem.getRootDirectories();
            
            for (Path path : rootDirectories) {
                
                File diretorio = new File( path.toFile().getPath() );
                
                if ( diretorio.isDirectory()  ) {
                    
                    Sub_ZeroTxt.add( diretorio.getPath() );
///////////////////////System.out.println( "Diretório: " + diretorio.getPath() );    
                }
                else{
                    //System.out.println( "Não Diretório: " + diretório.getPath() ); 
                }
            }                                   
            /*Iterable<FileStore> fileStores = fileSystem.getFileStores();
            for (FileStore fileStore : fileStores) {
                System.out.println(fileStore.name());
            }*/            
            listarPastas( Sub_ZeroTxt );
        } catch( Exception e ){ System.out.println( "Zero - Diretórios - Home - listarDiretorios()" ); }
    }

    private void listarPastas( List<String> diretorios ){
        
        try{  

            for (int i=0; i < diretorios.size(); i++) {

                File diretorio = new File( diretorios.get(i) ); 
                
                if ( diretorio.isDirectory()  ) {
                    
                    File[] listaDosArquivos = diretorio.listFiles(); 
                    
                    if ( listaDosArquivos != null ) { 
                        
                        for (int j=0; j < listaDosArquivos.length; j++) {
                                   
                            File f = new File( listaDosArquivos[j].getName() );
                                
                            listarArquivos( diretorio.getPath() + System.getProperty("file.separator") + f.getPath() );
                            //System.out.println( diretório.getPath() + System.getProperty("file.separator") + f.getPath() );                    
                        }
                    } else { System.out.println( "listaDosArquivos == null: " +diretorios.get(i)+ "listarPastas( List<String> diretorios )" ); }
                    
                } else { System.out.println( "Não é Diretório: " +diretorios.get(i)+ "listarPastas( List<String> diretorios )" ); }                
            }       
        } catch( Exception e ){ System.out.println( "Zero - Diretórios - Home - listarPastas( List<String> diretorios )" ); }
    }
    
    private void listarArquivos( String pasta ){
        
        try{               
                File diretorio = new File( pasta ); 
                
                if ( diretorio.isDirectory()  ) {
                    
                    File[] listaDosArquivos = diretorio.listFiles();
                    
                    if ( listaDosArquivos != null ) { 
                        
                        for (int i=0; i < listaDosArquivos.length; i++) {
                            
                            File f = new File( listaDosArquivos[i].getName() );
                            
                            filtrarTipoArquivos( diretorio, f );
                            
                            //System.out.println( diretório.getPath() + System.getProperty("file.separator") + f.getPath() );
                                                        
                            listarArquivos( diretorio.getPath() + System.getProperty("file.separator") + f.getPath() );
                        }                        
                    }                    
                }
                else{ /*System.out.println( pasta );*/ }

            
        } catch( Exception e ){ System.out.println( "Zero - Diretórios - Home - listarArquivos( String pasta )" ); }
    }
    
    private void filtrarTipoArquivos( File diretório, File arquivo ){
        
        try{  
            
            String d = diretório.getPath();
            String f = diretório.getPath() + System.getProperty("file.separator") + arquivo.getPath();
                        
            File file = new File( f );
            
            if ( file.isFile() == true ) {
                
                String extencao = f.substring( f.lastIndexOf('.') + 1 ); 
///////////////////System.out.println( d  );  
                
                capturarTodasImagens( f, extencao );
            }
                        
        } catch( Exception e ){ System.out.println( "Zero - Diretórios - Home - filtrarTipoArquivos( File diretório, File arquivo )" ); }
    }
    
    private void capturarTodasImagens( String endereco, String extencao ){        
        try{              
            switch( extencao ){                
                case "jpg": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break; 
                case "JPG": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break; 
                case "gif": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break; 
                case "GIF": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break; 
                case "png": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break; 
                case "PNG": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break; 
                case "bmp": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break; 
                case "BMP": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break; 
                case "dib": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "DIB": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "tiff": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "TIFF": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "raw": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "RAW": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "svg": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "SVG": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "webp": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "WEBP": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "exif": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
                case "EXIF": //System.out.println( endereco ); 
                    listarArquivos_img( endereco ); break;
            }                        
        } catch( Exception e ){ System.out.println( "Zero - Diretórios - Home - filtrarTipoArquivos( File diretório, File arquivo )" ); }
    }
     
    boolean umavez = false;
    List<String> lista_de_Imagens = new ArrayList<>();
    private void listarArquivos_img( String endereco ){        
        try{ 
            lista_de_Imagens.add( endereco );
///////////////System.out.println( endereco );
            
            if(umavez==false){
                umavez=true;
                setarImagemExterna2(0);
            }
        } catch( Exception e ){ System.out.println( "Zero - Diretórios - Home - deletarArquivo()" ); }
    }
    
    /*
    private void deletarArquivo( String endereco ){        
        try{ 
            boolean deletar = true;
            File file = new File( endereco );
            if( deletar = true ){
                deletar = false;
                //deletar = ( new File( file.getPath() ) ).delete();
            }
        } catch( Exception e ){ System.out.println( "Zero - Diretórios - Home - deletarArquivo()" ); }
    }
    */
}
